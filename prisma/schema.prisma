generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Message {
  id                Int                 @id @default(autoincrement())
  ServerId          Server              @relation(fields: [serverId], references: [id])
  ChannelId         Int
  name              String              @unique(map: "name") @db.VarChar(255)
  text              String              @db.VarChar(255)
  type              Message_type
  active            Boolean?            @default(true)
  CreatedAt         DateTime?           @default(now()) @db.DateTime(0)
  UpdatedAt         DateTime?           @default(now()) @db.DateTime(0)
  serverId          Int
  MessageComponents MessageComponents[]
}

model MessageComponents {
  id        Int                     @id @default(autoincrement())
  MessageId Message                 @relation(fields: [messageId], references: [id])
  CustomId  String                  @db.VarChar(255)
  label     String                  @db.VarChar(255)
  style     MessageComponents_style
  emoji     String?                 @db.VarChar(255)
  disabled  Boolean?
  CreatedAt DateTime?               @default(now()) @db.DateTime(0)
  UpdatedAt DateTime?               @default(now()) @db.DateTime(0)
  messageId Int
}

model Owner {
  id        Int       @id @default(autoincrement())
  DiscordId String    @unique(map: "DiscordId") @db.VarChar(255)
  email     String?   @unique(map: "email") @db.VarChar(255)
  username  String?   @unique(map: "username") @db.VarChar(255)
  CreatedAt DateTime? @default(now()) @db.DateTime(0)
  UpdatedAt DateTime? @default(now()) @db.DateTime(0)
  Server    Server[]
}

model Server {
  id        Int       @id @default(autoincrement())
  GuildId   Int       @unique(map: "GuildId")
  OwnerId   Owner     @relation(fields: [ownerId], references: [id])
  CreatedAt DateTime? @default(now()) @db.DateTime(0)
  UpdatedAt DateTime? @default(now()) @db.DateTime(0)
  ownerId   Int
  Message   Message[]
}

enum MessageComponents_style {
  Primary
  Secondary
  Success
  Danger
  Link
}

enum Message_type {
  Onboarding
  Offboarding
  SetRole
}
